#include <iostream>
#include <cuda.h>
#include <cuda_runtime.h>
#include <cuda_fp16.h>


#include "utils.h"
#include "texture.h"

template<bool parallel_beam, int channels, bool clip_to_circle, typename T>
__global__ void
radon_forward_kernel(T *__restrict__ output, cudaTextureObject_t texture, const float *__restrict__ angles,
                     RaysCfg cfg) {
    // Calculate texture coordinates
    const int ray_id = blockIdx.x * blockDim.x + threadIdx.x;
    const int angle_id = blockIdx.y * blockDim.y + threadIdx.y;
    const int batch_id = blockIdx.z * channels;

    if (angle_id < cfg.n_angles && ray_id < cfg.det_count) {
        {{ DEFINE_ACCUMULATOR }}

        // compute ray
        float v, sx, sy, ex, ey;
        if (parallel_beam) {
            v = cfg.height / 2.0;
            sx = (ray_id - cfg.det_count / 2.0f + 0.5f) * cfg.det_spacing;
            sy = cfg.height;
            ex = sx;
            ey = -sy;
        } else {
            v = cfg.height / 2.0;
            sy = cfg.s_dist;
            sx = 0.0f;
            ey = -cfg.d_dist;
            ex = (ray_id - cfg.det_count / 2.0f + 0.5f) * cfg.det_spacing;
        }

        {{ ROTATE_RAY }}

        if (cfg.clip_to_circle) {
            // clip rays to circle (to reduce memory reads)
            const float radius = cfg.det_count / 2.0f;
            const float a = rdx * rdx + rdy * rdy;
            const float b = rsx * rdx + rsy * rdy;
            const float c = rsx * rsx + rsy * rsy - radius * radius;

            // min_clip to 1 to avoid getting empty rays
            const float delta_sqrt = sqrtf(max(b * b - a * c, 1.0f));
            const float alpha_s = (-b - delta_sqrt) / a;
            const float alpha_e = (-b + delta_sqrt) / a;

            rsx += rdx * alpha_s + v;
            rsy += rdy * alpha_s + v;
            rdx *= (alpha_e - alpha_s);
            rdy *= (alpha_e - alpha_s);
        } else {
            {{ CLIP_TO_SQUARE }}
        }
        {{ ACCUMULATE_LOOP }}

        {{ OUTPUT_LOOP }}
    }
}

template<typename T>
void radon_forward_cuda(
        const T *x, const float *angles, T *y,
        TextureCache &tex_cache, const RaysCfg &cfg, const int batch_size, const int device
) {
//    checkCudaErrors(cudaFuncSetCacheConfig(radon_forward_kernel_half<true>, cudaFuncCachePreferL1));
//    checkCudaErrors(cudaFuncSetCacheConfig(radon_forward_kernel_half<false>, cudaFuncCachePreferL1));

    constexpr bool is_float = std::is_same<T, float>::value;
    constexpr int precision = is_float ? PRECISION_FLOAT : PRECISION_HALF;
    const int channels = (batch_size % 4 == 0) ? 4 : 1;

    // copy x into CUDA Array (allocating it if needed) and bind to texture
    Texture *tex = tex_cache.get({device, batch_size, cfg.height, cfg.width, channels, precision});
    tex->put(x);

    // Invoke kernel
    dim3 block_dim(16, 16);
    dim3 grid_dim(roundup_div(cfg.det_count, 16), roundup_div(cfg.n_angles, 16), batch_size / channels);

    if (cfg.is_fanbeam) {
        if (channels == 1) {
            if (cfg.clip_to_circle) {
                radon_forward_kernel<false, 1, true> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
            } else {
                radon_forward_kernel<false, 1, false> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
            }
        } else {
            if (is_float) {
                if (cfg.clip_to_circle) {
                    radon_forward_kernel<false, 4, true> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
                } else {
                    radon_forward_kernel<false, 4, false> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
                }
            } else {
                if (cfg.clip_to_circle) {
                    radon_forward_kernel<false, 4, true> << < grid_dim, block_dim >> >
                                                                        ((__half *) y, tex->texture, angles, cfg);
                } else {
                    radon_forward_kernel<false, 4, false> << < grid_dim, block_dim >> >
                                                                         ((__half *) y, tex->texture, angles, cfg);
                }
            }
        }
    } else {
        if (channels == 1) {
            if (cfg.clip_to_circle) {
                radon_forward_kernel<true, 1, true> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
            } else {
                radon_forward_kernel<true, 1, false> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
            }
        } else {
            if (is_float) {
                if (cfg.clip_to_circle) {
                    radon_forward_kernel<true, 4, true> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
                } else {
                    radon_forward_kernel<true, 4, false> << < grid_dim, block_dim >> > (y, tex->texture, angles, cfg);
                }
            } else {
                if (cfg.clip_to_circle) {
                    radon_forward_kernel<true, 4, true> << < grid_dim, block_dim >> >
                                                                       ((__half *) y, tex->texture, angles, cfg);
                } else {
                    radon_forward_kernel<true, 4, false> << < grid_dim, block_dim >> >
                                                                        ((__half *) y, tex->texture, angles, cfg);
                }
            }
        }
    }
}

template void
radon_forward_cuda<float>(const float *x, const float *angles, float *y, TextureCache &tex_cache, const RaysCfg &cfg,
                          const int batch_size, const int device);

template void radon_forward_cuda<unsigned short>(const unsigned short *x, const float *angles, unsigned short *y,
                                                 TextureCache &tex_cache, const RaysCfg &cfg,
                                                 const int batch_size, const
                                                 int device);
